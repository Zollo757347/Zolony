type Query {
  checkMyMap(data: checkMyMapInput!): MapData
  checkUser(data: checkUserInput!): UserInfo
  checkMap(data: checkMapInput!): MapData!
}

type Mutation {
  createAccount(data: checkUserInput!): UserInfo!
  editProfile(data: editProfileInput!): UserInfo! 
  initialMyMap(data: initialMyMapInput!): MapData!
  editMyMap(data: editMyMapInput!): MapData!
  initialMap: Boolean!
  deleteUser(data: checkUserInput!): Boolean!
  deleteUserMap(data: deleteUserMapInput!): Boolean!
}

input checkMyMapInput {
  name: String!
  password: String! 
  mapName: String!
}

input checkUserInput {
  name: String!
  password: String!
}

input checkMapInput {
  mapName: String!
}

input editProfileInput {
  name: String!
  password: String!
  newName: String
  newPassword: String
  newAvatar: String
}

input initialMyMapInput {
  name: String!
  password: String!
  mapName: String!
  xLen: Int!
  yLen: Int!
  zLen: Int!
}

input editMyMapInput {
  name: String!
  password: String!
  mapName: String!
  map: MapDataInput!
}

input deleteUserMapInput {
  name: String!
  password: String!
  mapName: String!
}

input MapDataInput {
  xLen: Int!
  yLen: Int!
  zLen: Int!
  mapName: String!
  playground: [[[BlockDataInput!]!]!]!
}

input BlockDataInput {
  x: Int!
  y: Int!
  z: Int!
  blockName: String!
  type: Int!
  states: BlockStatesInput!
}

input BlockStatesInput {
  power: Int!
  source: Boolean!

  delay: Int
  facing: String
  locked: Boolean
  powered: Boolean

  lit: Boolean

  east: Int
  south: Int
  west: Int
  north: Int
}



type UserInfo {
  name: String!
  password: String!
  maps: [MapData]!
  avatar: String!
}


type MapData {
  xLen: Int!
  yLen: Int!
  zLen: Int!
  mapName: String!
  playground: [[[BlockData!]!]!]!
}

type BlockData {
  x: Int!
  y: Int!
  z: Int!
  blockName: String!
  type: Int!
  states: BlockStates!
}

type BlockStates {
  power: Int!
  source: Boolean!

  delay: Int
  facing: String
  locked: Boolean
  powered: Boolean

  lit: Boolean

  east: Int
  south: Int
  west: Int
  north: Int
}













