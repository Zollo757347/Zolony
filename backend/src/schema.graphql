type Query {
  logIn(data: logInInput!): UserInfo
  getMap(data: getMapInput!): MapData
}

type Mutation {
  createAccount(data: logInInput!): UserInfo
  editProfile(data: editProfileInput!): UserInfo
  initialMyMap(data: initialMyMapInput!): MapData
  editMyMap(data: editMyMapInput!): MapData
  deleteUser(data: logInInput!): Boolean
  deleteUserMap(data: deleteUserMapInput!): Boolean
}

input logInInput {
  name: String!
  password: String!
}

input getMapInput {
  mapName: String!
  name: String!
}

input editProfileInput {
  name: String!
  password: String!
  newPassword: String
  newAvatar: String
  newBio: String
  newLevel: Int
}

input initialMyMapInput {
  name: String!
  password: String!
  mapName: String!
  xLen: Int!
  yLen: Int!
  zLen: Int!
}

input editMyMapInput {
  name: String!
  password: String!
  mapName: String!
  map: MapDataInput!
}

input deleteUserMapInput {
  name: String!
  password: String!
  mapName: String!
}

input MapDataInput {
  xLen: Int!
  yLen: Int!
  zLen: Int!
  mapName: String!
  playground: [[[BlockDataInput!]!]!]!
}

input BlockDataInput {
  blockName: String!
  breakable: Boolean!
  type: Int!
  states: BlockStatesInput!
}

input BlockStatesInput {
  power: Int!
  source: Boolean!

  delay: Int
  facing: String
  locked: Boolean
  powered: Boolean

  lit: Boolean

  east: Int
  south: Int
  west: Int
  north: Int
}

type UserInfo {
  name: String!
  password: String!
  maps: [MapData]!
  avatar: String!
  bio: String!
  level: [Boolean]!
}

type MapData {
  xLen: Int!
  yLen: Int!
  zLen: Int!
  mapName: String!
  belonging: UserInfo!
  playground: [[[BlockData!]!]!]!
}

type BlockData {
  blockName: String!
  breakable: Boolean!
  type: Int!
  states: BlockStates!
}

type BlockStates {
  power: Int!
  source: Boolean!

  delay: Int
  facing: String
  locked: Boolean
  powered: Boolean

  lit: Boolean

  east: Int
  south: Int
  west: Int
  north: Int
}